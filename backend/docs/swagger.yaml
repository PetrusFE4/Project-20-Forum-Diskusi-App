openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://chatternestapi.carolynn.my.id/api/v1
tags:
  - name: auth
    description: Everything about your Pets
  - name: discussions
    description: Access to Petstore orders
  - name: replies
    description: Operations about user
  - name: subjects
    description: Everything about your Pets
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login to a registered account
      description: ''
      operationId: login
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /auth/register:
    post:
      tags:
        - auth
      summary: Create a new account
      description: ''
      operationId: register
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: 'Duplicate email, etc.'
  /auth/validate:
    get:
      tags:
        - auth
      summary: Validate Token
      description: ''
      operationId: validate
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: 'Duplicate email, etc.'
  /discussions:
    get:
      tags:
        - discussions
      summary: Get all discussions
      description: ''
      operationId: discussions.get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discussion'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    post:
      tags:
        - discussions
      summary: Post new discussion
      description: ''
      operationId: discussions.store
      security:
        - bearerAuth: []
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                community_id:
                  type: string
                  required: true
                title:
                  type: string
                  required: true
                content:
                  type: string
                  required: true
                attachments:
                  type: array
                  required: false
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                      value:
                        type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /discussions/{id}:
    get:
      tags:
        - discussions
      summary: Get discussion by ID
      description: ''
      operationId: discussions.show
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the discussion to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discussion'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    put:
      tags:
        - discussions
      summary: Update a discussion
      description: ''
      operationId: discussions.update
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the discussion to get
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                      value:
                        type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /discussions/{id}/score:
    post:
      tags:
        - discussions
      summary: Score a discussion
      description: ''
      operationId: discussions.score
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the discussion to get
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: integer
                  enum: [-1, 1]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    delete:
      tags:
        - discussions
      summary: Remove score off a discussion
      description: ''
      operationId: discussions.deleteScore
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the discussion to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /replies:
    get:
      tags:
        - replies
      summary: Get all replies
      description: ''
      operationId: replies.get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    post:
      tags:
        - replies
      summary: Post new reply
      description: ''
      operationId: replies.store
      security:
        - bearerAuth: []
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                discussion_id:
                  type: string
                  required: true
                parent_id:
                  type: string
                  required: false
                content:
                  type: string
                  required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /replies/{id}:
    get:
      tags:
        - replies
      summary: Get reply by ID
      description: ''
      operationId: replies.show
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    put:
      tags:
        - replies
      summary: Update a reply
      description: ''
      operationId: replies.update
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                      value:
                        type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /replies/{id}/score:
    post:
      tags:
        - replies
      summary: Score a reply
      description: ''
      operationId: replies.score
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: integer
                  enum: [-1, 1]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    delete:
      tags:
        - replies
      summary: Remove score off a reply
      description: ''
      operationId: replies.deleteScore
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /communities:
    get:
      tags:
        - communities
      summary: Get all replies
      description: ''
      operationId: communities.get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    post:
      tags:
        - communities
      summary: Post new reply
      description: ''
      operationId: communities.store
      security:
        - bearerAuth: []
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                discussion_id:
                  type: string
                parent_id:
                  type: string
                  required: true
                content:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /communities/{id}:
    get:
      tags:
        - communities
      summary: Get reply by ID
      description: ''
      operationId: communities.show
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '401':
          description: Invalid credential
        '404':
          description: User not found
    put:
      tags:
        - communities
      summary: Update a reply
      description: ''
      operationId: communities.update
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                      value:
                        type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /communities/{id}/join:
    post:
      tags:
        - communities
      summary: Score a reply
      description: ''
      operationId: communities.score
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: integer
                  enum: [-1, 1]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
  /communities/{id}/leave:
    post:
      tags:
        - communities
      summary: Score a reply
      description: ''
      operationId: communities.score
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: String ID of the reply to get
      requestBody:
        description: User credential
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: integer
                  enum: [-1, 1]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credential
        '404':
          description: User not found
components:
  schemas:
    Discussion:
      type: object
      properties:
        _id:
          type: ObjectId
        subject:
          type: ObjectId
        user:
          type: ObjectId
        title:
          type: string
        content:
          type: string
        reply_count:
          type: integer
        attachments:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              value:
                type: string
        score:
          type: integer
      xml:
        name: discussion
    Reply:
      type: object
      properties:
        _id:
          type: ObjectId
        discussion:
          type: ObjectId
        user:
          type: ObjectId
        title:
          type: string
        content:
          type: string
        reply_count:
          type: integer
        attachments:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              value:
                type: string
        score:
          type: integer
      xml:
        name: reply
    User:
      type: object
      properties:
        _id:
          type: ObjectId
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        profile_picture:
          type: string
          example: '12345'
        password:
          type: string
          example: '12345'
      xml:
        name: user
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
    DiscussisonUpdate:
      description: List of user object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:        
      type: http
      scheme: bearer
      bearerFormat: JWT 